import { Component, OnInit, OnDestroy, ElementRef, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';

interface Certificate {
  id: number;
  title: string;
  year: string;
  category: 'reiki' | 'accessbars' | 'theta';
  image: string;
  imageUrl?: string; // GerÃ§ek gÃ¶rsel URL'si
  description: string;
  isVisible?: boolean; // Lazy loading iÃ§in
}

@Component({
  selector: 'app-certificates',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './certificates.component.html',
  styleUrl: './certificates.component.scss'
})
export class CertificatesComponent implements OnInit, AfterViewInit, OnDestroy {
  selectedFilter: string = 'all';
  selectedCertificate: Certificate | null = null;
  isLightboxOpen = false;
  private observer?: IntersectionObserver;
  private animationDelay = 200; // Her kart arasÄ±nda 200ms gecikme

  certificates: Certificate[] = [
    // Reiki SertifikalarÄ± (3 adet)
    {
      id: 1,
      title: 'Reiki I SertifikasÄ±',
      year: '2019',
      category: 'reiki',
      image: 'âš¡',
      imageUrl: '/images/certificates/reiki-1.jpg',
      description: 'Temel Reiki teknikleri ve enerji ÅŸifacÄ±lÄ±ÄŸÄ±na giriÅŸ',
      isVisible: false
    },
    {
      id: 2,
      title: 'Reiki II SertifikasÄ±',
      year: '2020',
      category: 'reiki',
      image: 'âš¡',
      imageUrl: '/images/certificates/reiki-2.jpg',
      description: 'Ä°leri Reiki sembolleri ve uzaktan ÅŸifa teknikleri',
      isVisible: false
    },
    {
      id: 3,
      title: 'Reiki Master SertifikasÄ±',
      year: '2021',
      category: 'reiki',
      image: 'âš¡',
      imageUrl: '/images/certificates/reiki-master.jpg',
      description: 'Reiki Masteri ve Ã¶ÄŸretmenlik yetkisi',
      isVisible: false
    },

    // AccessBars SertifikasÄ± (1 adet)
    {
      id: 4,
      title: 'AccessBars SertifikasÄ±',
      year: '2020',
      category: 'accessbars',
      image: 'ðŸ”“',
      imageUrl: '/images/certificates/accessbars.jpg',
      description: 'Kafadaki 32 noktaya dokunarak zihinsel engelleri kaldÄ±rma',
      isVisible: false
    },

    // Theta Healing SertifikalarÄ± (diÄŸerleri)
    {
      id: 5,
      title: 'Theta Healing Temel SertifikasÄ±',
      year: '2019',
      category: 'theta',
      image: 'ðŸ§ ',
      imageUrl: '/images/certificates/theta-basic.jpg',
      description: 'Temel Theta Healing teknikleri ve uygulamalarÄ±',
      isVisible: false
    },
    {
      id: 6,
      title: 'Theta Healing Ä°leri SertifikasÄ±',
      year: '2020',
      category: 'theta',
      image: 'ðŸ§ ',
      imageUrl: '/images/certificates/theta-advanced.jpg',
      description: 'Ä°leri dÃ¼zey Theta Healing ve beyin dalgalarÄ±',
      isVisible: false
    },
    {
      id: 7,
      title: 'Theta Healing Manifesting SertifikasÄ±',
      year: '2021',
      category: 'theta',
      image: 'ðŸ§ ',
      imageUrl: '/images/certificates/theta-manifesting.jpg',
      description: 'Manifestasyon ve yaratma teknikleri',
      isVisible: false
    },
    {
      id: 8,
      title: 'Theta Healing DNA SertifikasÄ±',
      year: '2022',
      category: 'theta',
      image: 'ðŸ§ ',
      imageUrl: '/images/certificates/theta-dna.jpg',
      description: 'DNA aktivasyonu ve genetik ÅŸifacÄ±lÄ±k',
      isVisible: false
    },
    {
      id: 9,
      title: 'Theta Healing Relationship SertifikasÄ±',
      year: '2021',
      category: 'theta',
      image: 'ðŸ§ ',
      imageUrl: '/images/certificates/theta-relationship.jpg',
      description: 'Ä°liÅŸkiler ve duygusal ÅŸifa Ã§alÄ±ÅŸmalarÄ±',
      isVisible: false
    }
  ];

  constructor(private elementRef: ElementRef) { }

  ngOnInit() {
    // Ä°lk 3 kartÄ± hemen gÃ¶ster
    this.certificates.slice(0, 3).forEach(cert => cert.isVisible = true);
  }

  ngAfterViewInit() {
    this.setupIntersectionObserver();
  }

  ngOnDestroy() {
    if (this.observer) {
      this.observer.disconnect();
    }
  }

  private setupIntersectionObserver() {
    if (typeof window !== 'undefined' && 'IntersectionObserver' in window) {
      this.observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
              const cardElement = entry.target as HTMLElement;
              const cardId = parseInt(cardElement.getAttribute('data-certificate-id') || '0');

              // Kart gÃ¶rÃ¼nÃ¼r alana girdiÄŸinde yavaÅŸÃ§a animate et
              setTimeout(() => {
                const certificate = this.certificates.find(c => c.id === cardId);
                if (certificate) {
                  certificate.isVisible = true;
                }
                cardElement.classList.add('certificate-animate-in');
              }, index * 100); // Her kart arasÄ±nda 100ms gecikme

              this.observer?.unobserve(entry.target);
            }
          });
        },
        {
          rootMargin: '50px 0px', // 50px Ã¶nce tetikle
          threshold: 0.1
        }
      );

      // TÃ¼m sertifika kartlarÄ±nÄ± observe et
      setTimeout(() => {
        const certificateCards = this.elementRef.nativeElement.querySelectorAll('.certificate-card');
        certificateCards.forEach((card: Element) => {
          this.observer?.observe(card);
        });
      }, 100);
    }
  }

  get filteredCertificates() {
    if (this.selectedFilter === 'all') {
      return this.certificates;
    }
    return this.certificates.filter(cert => cert.category === this.selectedFilter);
  }

  setFilter(filter: string) {
    this.selectedFilter = filter;

    // Filter deÄŸiÅŸtiÄŸinde intersection observer'Ä± yeniden kur
    setTimeout(() => {
      // Eski observer'Ä± temizle
      if (this.observer) {
        this.observer.disconnect();
      }

      // Yeni filter iÃ§in kartlarÄ± sÄ±fÄ±rla
      this.certificates.forEach(cert => {
        cert.isVisible = this.filteredCertificates.slice(0, 3).includes(cert);
      });

      // Yeni observer kur
      this.setupIntersectionObserver();
    }, 50);
  }

  getCategoryCount(category: string): number {
    if (category === 'all') return this.certificates.length;
    return this.certificates.filter(cert => cert.category === category).length;
  }

  getCategoryName(category: string): string {
    const names = {
      'all': 'TÃ¼mÃ¼',
      'reiki': 'Reiki',
      'accessbars': 'AccessBars',
      'theta': 'Theta Healing'
    };
    return names[category as keyof typeof names];
  }

  trackByCertificate(index: number, certificate: Certificate): number {
    return certificate.id;
  }

  // Lightbox Methods
  openLightbox(certificate: Certificate) {
    this.selectedCertificate = certificate;
    this.isLightboxOpen = true;
    document.body.style.overflow = 'hidden'; // Scroll'u engelle
  }

  closeLightbox() {
    this.isLightboxOpen = false;
    this.selectedCertificate = null;
    document.body.style.overflow = 'auto'; // Scroll'u geri aÃ§
  }

  onLightboxClick(event: Event) {
    // Lightbox backdrop'a tÄ±klandÄ±ÄŸÄ±nda kapat
    if (event.target === event.currentTarget) {
      this.closeLightbox();
    }
  }

  onKeydown(event: KeyboardEvent) {
    if (event.key === 'Escape') {
      this.closeLightbox();
    }
  }

  // GÃ¶rsel yÃ¼kleme hatasÄ± iÃ§in fallback
  onImageError(event: any) {
    event.target.style.display = 'none';
    // Emoji fallback gÃ¶sterilecek
  }

  // Lazy loading iÃ§in gÃ¶rsel loading
  onImageLoad(certificate: Certificate) {
    // GÃ¶rsel yÃ¼klendiÄŸinde fade-in efekti
    certificate.isVisible = true;
  }
}
